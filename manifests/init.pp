# == Class: nomad
#
# Installs, configures, and manages nomad
#
# === Parameters
#
# [*version*]
#   Specify version of nomad binary to download.
#
# [*config_hash*]
#   Use this to populate the JSON config file for nomad.
#
# [*config_mode*]
#   Use this to set the JSON config file mode for nomad.
#
# [*pretty_config*]
#   Generates a human readable JSON config file. Defaults to `false`.
#
# [*pretty_config_indent*]
#   Toggle indentation for human readable JSON file. Defaults to `4`.
#
# [*install_method*]
#   Valid strings: `package` - install via system package
#                  `url`     - download and extract from a url. Defaults to `url`.
#                  `none`    - disable install.
#
# [*package_name*]
#   Only valid when the install_method == package. Defaults to `nomad`.
#
# [*package_ensure*]
#   Only valid when the install_method == package. Defaults to `latest`.
#
#
# [*restart_on_change*]
#   Determines whether to restart nomad agent on $config_hash changes.
#   This will not affect reloads when service, check or watch configs change.
# Defaults to `true`.
#
# [*extra_options*]
#   Extra arguments to be passed to the nomad agent
#
# [*init_style*]
#   What style of init system your system uses.
#
# [*purge_config_dir*]
#   Purge config files no longer generated by Puppet
class nomad (
  String[1]                   $arch                  = $nomad::params::arch,
  Stdlib::Absolutepath        $bin_dir               = '/usr/local/bin',
  Hash                        $config_defaults       = {},
  Stdlib::Absolutepath        $config_dir            = '/etc/nomad',
  Hash                        $config_hash           = {},
  String[1]                   $config_mode           = $nomad::params::config_mode,
  String[1]                   $download_extension    = $nomad::params::download_extension,
  Optional[Stdlib::HTTPUrl]   $download_url          = undef,
  String[1]                   $download_url_base     = $nomad::params::download_url_base,
  Array                       $extra_groups          = [],
  Optional[String[1]]         $extra_options         = undef,
  String[1]                   $group                 = 'nomad',
  String[1]                   $init_style            = $nomad::params::init_style,
  String[1]                   $install_method        = $nomad::params::install_method,
  Boolean                     $join_wan              = false,
  Boolean                     $manage_group          = true,
  Boolean                     $manage_service        = true,
  Boolean                     $manage_user           = true,
  String[1]                   $os                    = $nomad::params::os,
  String[1]                   $package_name          = $nomad::params::package_name,
  String[1]                   $package_ensure        = $nomad::params::package_ensure,
  Boolean                     $pretty_config         = false,
  Integer                     $pretty_config_indent  = 4,
  Boolean                     $purge_config_dir      = true,
  Boolean                     $restart_on_change     = true,
  Boolean                     $service_enable        = true,
  Enum['stopped', 'running']  $service_ensure        = 'running',
  String[1]                   $user                  = 'nomad',
  String[1]                   $version               = $nomad::params::version,
) inherits nomad::params {

  $real_download_url = pick($download_url, "${download_url_base}${version}/${package_name}_${version}_${os}_${arch}.${download_extension}")

  $config_hash_real = deep_merge($config_defaults, $config_hash)
  validate_hash($config_hash_real)

  if $config_hash_real['data_dir'] {
    $data_dir = $config_hash_real['data_dir']
  } else {
    $data_dir = undef
  }

  if ($config_hash_real['ports'] and $config_hash_real['ports']['rpc']) {
    $rpc_port = $config_hash_real['ports']['rpc']
  } else {
    $rpc_port = 8400
  }

  if ($config_hash_real['addresses'] and $config_hash_real['addresses']['rpc']) {
    $rpc_addr = $config_hash_real['addresses']['rpc']
  } elsif ($config_hash_real['client_addr']) {
    $rpc_addr = $config_hash_real['client_addr']
  } else {
    $rpc_addr = $::ipaddress_lo
  }

  $notify_service = $restart_on_change ? {
    true    => Class['nomad::run_service'],
    default => undef,
  }

  anchor {'nomad_first': }
  -> class { '::nomad::install': }
  -> class { '::nomad::config':
    config_hash => $config_hash_real,
    purge       => $purge_config_dir,
    notify      => $notify_service,
  }
  -> class { '::nomad::run_service': }
  -> class { '::nomad::reload_service': }
  -> anchor {'nomad_last': }
}
